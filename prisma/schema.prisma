generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  avatarUrl     String?
  createdAt     DateTime        @default(now())
  email         String?         @unique
  emailVerified DateTime?
  password      String?

  accounts      Account[]
  sessions      Session[]
  ratings       Rating[]
  savedMovies   Movie[]         @relation("UserSavedMovies")
  savedSeries   Series[]        @relation("UserSavedSeries")
  votes       Vote[] 
  notificationsReceived Notification[] @relation("NotificationsReceived")
  notificationsSent     Notification[] @relation("NotificationsSent")

  @@map("users")
}

model Movie {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  users       User[]   @relation("UserSavedMovies")
  ratings     Rating[]
  externalReviews     ExternalReview[]
  votes       Vote[] 

  @@map("movies")
}

model Series {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  users       User[]   @relation("UserSavedSeries")
  ratings     Rating[]
  externalReviews     ExternalReview[]
  votes       Vote[] 

  @@map("series")
}

model Rating {
  id          String   @id @default(uuid())
  rate        Float
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  movie   Movie?   @relation(fields: [movieId], references: [id])
  movieId  String?

  series   Series?   @relation(fields: [seriesId], references: [id])
  seriesId  String?

  votes   Vote[]

  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@index([seriesId])
  @@index([movieId])
  @@index([userId])
  @@map("ratings")
}

model ExternalReview {
  id            String   @id
  author        String
  content       String   @db.Text
  createdAt     DateTime
  rating        Float?   // <- do author_details.rating
  username      String?  // <- do author_details.username
  name          String?  // <- do author_details.name
  avatarPath    String?  // <- do author_details.avatar_path

  movie         Movie?   @relation(fields: [movieId], references: [id])
  movieId       String?

  series        Series?  @relation(fields: [seriesId], references: [id])
  seriesId      String?

  votes         Vote[]

  @@map("external_reviews")
}

model Vote {
  id               String         @id @default(uuid())
  type             VoteType
  createdAt        DateTime       @default(now())

  userId           String
  user             User           @relation(fields: [userId], references: [id])

  movieId          String?
  movie            Movie?         @relation(fields: [movieId], references: [id])

  seriesId         String?
  series           Series?        @relation(fields: [seriesId], references: [id])

  ratingId         String?
  rating           Rating?        @relation(fields: [ratingId], references: [id])

  externalReviewId String?
  externalReview   ExternalReview? @relation(fields: [externalReviewId], references: [id])

  @@unique([userId, movieId])
  @@unique([userId, seriesId])
  @@unique([userId, ratingId]) // Adiciona a combinação única
  @@unique([userId, externalReviewId]) // Adiciona a combinação única

  @@map("votes")
}

enum VoteType {
  UP
  DOWN
}

model Notification {
  id          String   @id @default(cuid())
  type        String
  recipientId String
  senderId    String
  commentId   String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  recipient   User     @relation("NotificationsReceived", fields: [recipientId], references: [id])
  sender      User     @relation("NotificationsSent", fields: [senderId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
